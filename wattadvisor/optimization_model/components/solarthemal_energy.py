"""Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.
"""

import pyomo.environ as pyoe
import pandas as pd

from .base import Component
import wattadvisor.data_models.enums as enums


class SolarthermalEnergy(Component):
    def __init__(self, 
                 name: str, 
                 interest_rate: float, 
                 parameters: dict,
                 weather_data: pd.Series,
                 installed_area: float, 
                 potential_area: float | None = None,
                 capex: float | None = None, 
                 opex: float | None = None, 
                 lifespan: float | None = None,
                 normed_production: pd.Series | None = None):
        
        """Component to generate thermal energy from solar energy.

        Parameters
        ----------
        name : str
            Name of the component
        interest_rate : float
            Interest rate to determine annuity factor for investment calculation of the component, by default None 
        parameters : dict
            Dictionary of techno-economic parameters of the component, by default None.
            A dict of the following structure is expeceted. 
            At least one key at first level ("scalars" or "tabs") is required:

            .. code-block:: json

                {
                    "scalars": {
                        "parameter_title": 0
                    },
                    "tabs": {
                        "tab_title": {
                            "key_1": 1,
                            "key_2": 2
                        }
                    }
                }


        weather_data : pd.Series
            Time series of hourly weather data for one year generated by the function call `..utils.weather_data.get_weather_data_from_file(..., lib="pvlib")`
        installed_area : float
            Already installed area of the component [qm] which acts as a lower bound
        potential_power : float | None, optional
            Maximum installable area of the component [qm], by default None
        capex : float | None, optional
            Capital expenditure cost of the component per area [€/qm], by default None
        opex : float | None, optional
            Operational expenditure cost of the component per CAPEX per year [%/a], by default None
        lifespan : float | None, optional
            Expected lifespan of the component [a], by default None
        normed_production : pd.Series | None, optional
            Determinated normed energy production series which can be given as an input. If given,
            calculation of normed production by the usage of 'weather_data' is skipped.
        """

        super().__init__(name, interest_rate, parameters)

        self.installed_area = installed_area
        self.potential_area = potential_area
        self.weather_data = weather_data
        self.normed_production = normed_production 
        
        if capex is not None:
            self.capex = capex
        
        if opex is not None:
            self.opex = opex
        
        if lifespan is not None:
            self.lifespan = lifespan

    def _load_params(self, model: pyoe.Model, t: pyoe.RangeSet) -> pyoe.Model:
        
        if self.normed_production is None:
            self.normed_production = self.weather_data["ghi"] / 1000 * self.eff

        self.normed_production = self.normed_production.set_axis(t).to_dict()

        self.normed_production = pyoe.Param(t, initialize=self.normed_production)
        model.add_component(f'{self.name}_normed_production', self.normed_production)

        return model
        
    def _add_variables(self, model: pyoe.Model, t: pyoe.RangeSet) -> pyoe.Model:

        #(Output) thermal power in kWh
        self.heat=pyoe.Var(t, bounds=(0.0, None))
        model.add_component('{}_heat'.format(self.name), self.heat)

        # total cost, which is evaluated in the target function
        self.z=pyoe.Var(bounds=(0.0, None))
        model.add_component('{}_z'.format(self.name), self.z)

        # annual running cost
        self.running_cost=pyoe.Var(bounds=(0.0, None))
        model.add_component('{}_running_cost'.format(self.name), self.running_cost)

        # one-time installation cost
        self.installation_cost = pyoe.Var(bounds=(0.0, None))
        model.add_component('{}_installation_cost'.format(self.name), self.installation_cost)

        # collector size [m²] that has to be installed at maximum
        self.max_area=pyoe.Var(bounds=(self.installed_area, self.potential_area))
        model.add_component('{}_max_area'.format(self.name), self.max_area)

        self.bilance_variables.output[enums.EnergyType.THERMAL] = self.heat

        return model

    def _add_constraints(self, model: pyoe.Model, t: pyoe.RangeSet) -> pyoe.Model:

        # calculating total cost, costs depending on peak power and eventually co2 emissions
        self.eq01=pyoe.Constraint(expr=self.z == self.installation_cost * self.annuity_factor + self.running_cost)
        model.add_component('{}_eq01'.format(self.name), self.eq01)

        # calculating thermal output by applying the peak power to the standard profile
        self.eq02=pyoe.ConstraintList()
        model.add_component('{}_eq02'.format(self.name), self.eq02)
        for tx in t:
            self.eq02.add(self.heat[tx] == self.max_area * self.eff * self.normed_production[tx])

        #calculate the annual running cost
        self.eq04=pyoe.Constraint(expr=self.running_cost == self.installation_cost * self.opex/100)
        model.add_component('{}_eq04'.format(self.name), self.eq04)

        #calculate the one-time installation cost
        self.eq05=pyoe.Constraint(expr=self.installation_cost == self.max_area * self.capex)
        model.add_component('{}_eq05'.format(self.name), self.eq05)

        return model