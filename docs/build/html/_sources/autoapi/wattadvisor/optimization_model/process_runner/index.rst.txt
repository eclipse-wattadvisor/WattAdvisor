wattadvisor.optimization_model.process_runner
=============================================

.. py:module:: wattadvisor.optimization_model.process_runner

.. autoapi-nested-parse::

   Collection of functions to start the optization process
   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Classes
-------

.. autoapisummary::

   wattadvisor.optimization_model.process_runner.InputModel
   wattadvisor.optimization_model.process_runner.OptimizationResultsModel
   wattadvisor.optimization_model.process_runner.ConfigModel


Functions
---------

.. autoapisummary::

   wattadvisor.optimization_model.process_runner.run_direct


Module Contents
---------------

.. py:class:: InputModel

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: location
      :type:  wattadvisor.data_models.input_model_location.InputModelLocation


   .. py:attribute:: interest_rate
      :type:  Optional[float]


   .. py:attribute:: energy_demands
      :type:  list[wattadvisor.data_models.input_model_demand_object.InputModelDemandObject]


   .. py:attribute:: energy_components
      :type:  Optional[list[Union[wattadvisor.data_models.input_model_component_object.InputModelComponentPower, wattadvisor.data_models.input_model_component_object.InputModelComponentArea, wattadvisor.data_models.input_model_component_object.InputModelComponentStorage]]]


   .. py:attribute:: energy_tariffs
      :type:  Optional[wattadvisor.data_models.input_model_energy_tariffs.InputModelEnergyTariffs]


.. py:class:: OptimizationResultsModel

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: status
      :type:  wattadvisor.data_models.optimization_results_status.OptimizationResultsStatus


   .. py:attribute:: requested_input
      :type:  wattadvisor.data_models.input_model.InputModel


   .. py:attribute:: results
      :type:  Optional[wattadvisor.data_models.optimization_results_scenarios.OptimizationResultsScenarios]


.. py:class:: ConfigModel

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: solver
      :type:  wattadvisor.data_models.enums.SupportedSolver


   .. py:attribute:: solver_timeout
      :type:  int


   .. py:attribute:: default_interest_rate
      :type:  float


   .. py:attribute:: data_dependencies
      :type:  ConfigModelDataDependencies


   .. py:attribute:: logging
      :type:  ConfigModelLogging | None


.. py:function:: run_direct(inputdata: wattadvisor.data_models.input_model.InputModel, export: bool = False) -> wattadvisor.data_models.optimization_results_model.OptimizationResultsModel

   Starts the optimization by using static input data from memory.

   :param inputdata: input data to build the optimization model
   :type inputdata: InputModel
   :param export: whether to export detailed result time series to separate excel file, by default False
   :type export: bool, optional

   :returns: pydantic object representing optimization results
   :rtype: OptimizationResultsModel


