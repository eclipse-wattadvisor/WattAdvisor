wattadvisor.optimization_model.components.wind_power
====================================================

.. py:module:: wattadvisor.optimization_model.components.wind_power

.. autoapi-nested-parse::

   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Classes
-------

.. autoapisummary::

   wattadvisor.optimization_model.components.wind_power.Component
   wattadvisor.optimization_model.components.wind_power.WindPower


Functions
---------

.. autoapisummary::

   wattadvisor.optimization_model.components.wind_power.windpower_normed_feedin_from_era5


Module Contents
---------------

.. py:function:: windpower_normed_feedin_from_era5(latitude: float, longitude: float, hub_height: float, start_date: datetime.datetime, end_date: datetime.datetime, cds_api_key: str | None = None, path_era5_file: str | None = None, windpowerlib_df: pandas.DataFrame | None = None, path_export_csv: str | None = None, normalized: bool = True) -> pandas.Series

   Calculates wind power plant generation profile for a certain location and time range by
   using weather data from ERA5 Climate Data Store, either downloaded by this function or downloaded before

   :param latitude: latitude of the location point for which the wind power generation should be calculated
   :type latitude: float
   :param longitude: longitude of the location point for which the wind power generation should be calculated
   :type longitude: float
   :param hub_height: height of the wind power plant hub where the power will be generated [m]
   :type hub_height: float
   :param start_date: datetime of the first time interval of the time range for which the wind power generation should be calculated
   :type start_date: datetime
   :param end_date: datetime of the last time interval of the time range for which the wind power generation should be calculated
   :type end_date: datetime
   :param cds_api_key: key to access the ERA5 Climate Data Store, more information [here](https://cds.climate.copernicus.eu/api-how-to), by default None
   :type cds_api_key: str | None, optional
   :param path_era5_file: path to a file with raw weather data from the climate data store, if already downloaded before, by default None
   :type path_era5_file: str | None, optional
   :param windpowerlib_df: DataFrame with already generated weather data for windpower from raw weather data from the climate data store, if already downloaded before, by default None
   :type windpowerlib_df: pd.DataFrame | None, optional
   :param path_export_csv: path to CSV file to write the resulted generation time series to, by default None
   :type path_export_csv: str | None, optional
   :param normalized: whether resulting power values should be normalized to installed power, by default True
   :type normalized: bool, optional

   :returns: time series of power generation values for each hourly time interval in the range between `start_date` and `end_date`
   :rtype: pd.Series

   :raises ValueError: if `windpowerlib_df`, `path_era5_file` and key for climate date store `cds_api_key` are not provided


.. py:class:: Component(name: str, interest_rate: None | float = None, parameters: None | dict = None)

   
   Parent base class for all optimization energy components.
   Contains empty methods which are overidden by child classes.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: None | float, optional
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: None | dict, optional

   :raises ValueError: If values of ``interest_rate`` and ``lifespan`` (from ``parameters``) are ``None``.


   .. py:method:: add_to_model(model: pyomo.core.Model, t: pyomo.core.RangeSet) -> pyomo.core.Model

      Calls the appropriate functions to add parameters, variables and constraints to the pyomo model given by `model`.

      :param model: Pyomo model to which the parameters, variables and constraints will be added.
      :type model: Model
      :param t: Time set over which time-variant parameters, variables and constraints will be added.
      :type t: RangeSet

      :returns: Pyomo model with the added parameters, variables and constraints
      :rtype: Model



.. py:class:: WindPower(name: str, interest_rate: float, parameters: dict, latitude: float, longitude: float, weather_data: pandas.DataFrame, installed_power: float, potential_power: float | None = None, capex: float | None = None, opex: float | None = None, lifespan: float | None = None, hub_height: float = 100)

   Bases: :py:obj:`wattadvisor.optimization_model.components.base.Component`


   
   Component to generate electrical energy from wind energy.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: float
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict

   latitude : float
       Latitude of the location of the component
   longitude : float
       Longitude of the location of the component
   weather_data : pd.Series
       Time series of hourly weather data for one year generated by the function call `..utils.weather_data.get_weather_data_from_file(..., lib="windpowerlib")`
   installed_power : float
       Already installed electrical power of the component [kW] which acts as a lower bound
   potential_power : float | None, optional
       Maximum installable electrical power of the component [kW], by default None
   capex : float | None, optional
       Capital expenditure cost of the component per electrical power [â‚¬/kW], by default None
   opex : float | None, optional
       Operational expenditure cost of the component per CAPEX per year [%/a], by default None
   hub_height: float
       height of the wind power plant hub above ground of the plant [m], by default 200


