wattadvisor.optimization_model.components.heat_pump
===================================================

.. py:module:: wattadvisor.optimization_model.components.heat_pump

.. autoapi-nested-parse::

   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Classes
-------

.. autoapisummary::

   wattadvisor.optimization_model.components.heat_pump.HeatPump
   wattadvisor.optimization_model.components.heat_pump.HeatPumpAir
   wattadvisor.optimization_model.components.heat_pump.HeatPumpGround


Module Contents
---------------

.. py:class:: HeatPump(name: str, interest_rate: float, parameters: dict, weather_temp_data: pandas.Series, installed_power: float, potential_power: float | None = None, capex: float | None = None, opex: float | None = None, lifespan: float | None = None)

   Bases: :py:obj:`wattadvisor.optimization_model.components.base.Component`


   
   Component that uses electrical energy and a low temperature heat source to generate higher temperature heat.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: float
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict
   :param weather_temp_data: Hourly temperature of the heat source as time series for one year
   :type weather_temp_data: pd.Series
   :param installed_power: Already installed thermal power of the component [kW] which acts as a lower bound
   :type installed_power: float
   :param potential_power: Maximum installable thermal power of the component [kW], by default None
   :type potential_power: float | None, optional
   :param capex: Capital expenditure cost of the component per thermal power [€/kW], by default None
   :type capex: float | None, optional
   :param opex: Operational expenditure cost of the component per CAPEX per year [%/a], by default None
   :type opex: float | None, optional
   :param lifespan: Expected lifespan of the component [a], by default None
   :type lifespan: float | None, optional


   .. py:attribute:: weather_temp_data


   .. py:attribute:: installed_power


   .. py:attribute:: potential_power


.. py:class:: HeatPumpAir(name: str, interest_rate: float, parameters: dict, weather_temp_data: pandas.Series, installed_power: float, potential_power: float | None = None, capex: float | None = None, opex: float | None = None, lifespan: float | None = None)

   Bases: :py:obj:`HeatPump`


   
   Component that uses electrical energy and a low temperature heat source to generate higher temperature heat.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: float
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict
   :param weather_temp_data: Hourly temperature of the heat source as time series for one year
   :type weather_temp_data: pd.Series
   :param installed_power: Already installed thermal power of the component [kW] which acts as a lower bound
   :type installed_power: float
   :param potential_power: Maximum installable thermal power of the component [kW], by default None
   :type potential_power: float | None, optional
   :param capex: Capital expenditure cost of the component per thermal power [€/kW], by default None
   :type capex: float | None, optional
   :param opex: Operational expenditure cost of the component per CAPEX per year [%/a], by default None
   :type opex: float | None, optional
   :param lifespan: Expected lifespan of the component [a], by default None
   :type lifespan: float | None, optional


.. py:class:: HeatPumpGround(name: str, interest_rate: float, parameters: dict, weather_temp_data: pandas.Series, installed_power: float, potential_power: float | None = None, capex: float | None = None, opex: float | None = None, lifespan: float | None = None)

   Bases: :py:obj:`HeatPump`


   
   Component that uses electrical energy and a low temperature heat source to generate higher temperature heat.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: float
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict
   :param weather_temp_data: Hourly temperature of the heat source as time series for one year
   :type weather_temp_data: pd.Series
   :param installed_power: Already installed thermal power of the component [kW] which acts as a lower bound
   :type installed_power: float
   :param potential_power: Maximum installable thermal power of the component [kW], by default None
   :type potential_power: float | None, optional
   :param capex: Capital expenditure cost of the component per thermal power [€/kW], by default None
   :type capex: float | None, optional
   :param opex: Operational expenditure cost of the component per CAPEX per year [%/a], by default None
   :type opex: float | None, optional
   :param lifespan: Expected lifespan of the component [a], by default None
   :type lifespan: float | None, optional


