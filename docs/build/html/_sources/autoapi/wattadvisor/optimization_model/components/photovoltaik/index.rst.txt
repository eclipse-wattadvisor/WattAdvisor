wattadvisor.optimization_model.components.photovoltaik
======================================================

.. py:module:: wattadvisor.optimization_model.components.photovoltaik

.. autoapi-nested-parse::

   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Classes
-------

.. autoapisummary::

   wattadvisor.optimization_model.components.photovoltaik.Photovoltaik
   wattadvisor.optimization_model.components.photovoltaik.PhotovoltaikRoof
   wattadvisor.optimization_model.components.photovoltaik.PhotovoltaikFreeField


Module Contents
---------------

.. py:class:: Photovoltaik(name: str, interest_rate: float, parameters: dict, latitude: float, longitude: float, weather_data: pandas.DataFrame, installed_power: float, potential_power: float | None = None, capex: float | None = None, opex: float | None = None, lifespan: float | None = None, azimuth: float = 180, tilt: float = 40, elevation: float = 0)

   Bases: :py:obj:`wattadvisor.optimization_model.components.base.Component`


   
   Component to generate electrical energy from solar energy.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: float
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict

   latitude : float
       Latitude of the location of the component
   longitude : float
       Longitude of the location of the component
   weather_data : pd.DataFrame
       Time series of hourly weather data for one year generated by the function call :func:`wattadvisor.optimization_model.utils.weather_data.get_weather_data_from_file`
   installed_power : float
       Already installed electrical power of the component [kW] which acts as a lower bound
   potential_power : float | None, optional
       Maximum installable electrical power of the component [kW], by default None
   capex : float | None, optional
       Capital expenditure cost of the component per electrical power [€/kW], by default None
   opex : float | None, optional
       Operational expenditure cost of the component per CAPEX per year [%/a], by default None
   lifespan : float | None, optional
       Expected lifespan of the component [a], by default None
   azimuth : float, optional
       Azimuth orientation [°] of the photovoltaic plant where the power will be generated, by default 180

       - North=0
       - East=90
       - South=180
       - West=270

   tilt : float, optional
       Tilt orientation [°] of the photovoltaic plant where the power will be generated, by default 40

       - Up=0
       - horizon=90

   elevation : float, optional
       elevation of the location of the photovoltaic plant above sea level [m], by default 0


   .. py:attribute:: installed_power


   .. py:attribute:: potential_power


   .. py:attribute:: weather_data


   .. py:attribute:: latitude


   .. py:attribute:: longitude


   .. py:attribute:: azimuth


   .. py:attribute:: tilt


   .. py:attribute:: elevation


.. py:class:: PhotovoltaikRoof(name: str, interest_rate: float, parameters: dict, latitude: float, longitude: float, weather_data: pandas.DataFrame, installed_power: float, potential_power: float | None = None, capex: float | None = None, opex: float | None = None, lifespan: float | None = None, azimuth: float = 180, tilt: float = 40, elevation: float = 0)

   Bases: :py:obj:`Photovoltaik`


   
   Component to generate electrical energy from solar energy.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: float
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict

   latitude : float
       Latitude of the location of the component
   longitude : float
       Longitude of the location of the component
   weather_data : pd.DataFrame
       Time series of hourly weather data for one year generated by the function call :func:`wattadvisor.optimization_model.utils.weather_data.get_weather_data_from_file`
   installed_power : float
       Already installed electrical power of the component [kW] which acts as a lower bound
   potential_power : float | None, optional
       Maximum installable electrical power of the component [kW], by default None
   capex : float | None, optional
       Capital expenditure cost of the component per electrical power [€/kW], by default None
   opex : float | None, optional
       Operational expenditure cost of the component per CAPEX per year [%/a], by default None
   lifespan : float | None, optional
       Expected lifespan of the component [a], by default None
   azimuth : float, optional
       Azimuth orientation [°] of the photovoltaic plant where the power will be generated, by default 180

       - North=0
       - East=90
       - South=180
       - West=270

   tilt : float, optional
       Tilt orientation [°] of the photovoltaic plant where the power will be generated, by default 40

       - Up=0
       - horizon=90

   elevation : float, optional
       elevation of the location of the photovoltaic plant above sea level [m], by default 0


.. py:class:: PhotovoltaikFreeField(name: str, interest_rate: float, parameters: dict, latitude: float, longitude: float, weather_data: pandas.DataFrame, installed_power: float, potential_power: float | None = None, capex: float | None = None, opex: float | None = None, lifespan: float | None = None, azimuth: float = 180, tilt: float = 40, elevation: float = 0)

   Bases: :py:obj:`Photovoltaik`


   
   Component to generate electrical energy from solar energy.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: float
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict

   latitude : float
       Latitude of the location of the component
   longitude : float
       Longitude of the location of the component
   weather_data : pd.DataFrame
       Time series of hourly weather data for one year generated by the function call :func:`wattadvisor.optimization_model.utils.weather_data.get_weather_data_from_file`
   installed_power : float
       Already installed electrical power of the component [kW] which acts as a lower bound
   potential_power : float | None, optional
       Maximum installable electrical power of the component [kW], by default None
   capex : float | None, optional
       Capital expenditure cost of the component per electrical power [€/kW], by default None
   opex : float | None, optional
       Operational expenditure cost of the component per CAPEX per year [%/a], by default None
   lifespan : float | None, optional
       Expected lifespan of the component [a], by default None
   azimuth : float, optional
       Azimuth orientation [°] of the photovoltaic plant where the power will be generated, by default 180

       - North=0
       - East=90
       - South=180
       - West=270

   tilt : float, optional
       Tilt orientation [°] of the photovoltaic plant where the power will be generated, by default 40

       - Up=0
       - horizon=90

   elevation : float, optional
       elevation of the location of the photovoltaic plant above sea level [m], by default 0


