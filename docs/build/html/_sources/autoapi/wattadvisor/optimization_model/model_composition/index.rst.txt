wattadvisor.optimization_model.model_composition
================================================

.. py:module:: wattadvisor.optimization_model.model_composition

.. autoapi-nested-parse::

   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Attributes
----------

.. autoapisummary::

   wattadvisor.optimization_model.model_composition.logger


Classes
-------

.. autoapisummary::

   wattadvisor.optimization_model.model_composition.ConfigModel
   wattadvisor.optimization_model.model_composition.InputModel
   wattadvisor.optimization_model.model_composition.InputModelSingleTariffObject
   wattadvisor.optimization_model.model_composition.Component
   wattadvisor.optimization_model.model_composition.EnergyDemand
   wattadvisor.optimization_model.model_composition.EnergyFeedin
   wattadvisor.optimization_model.model_composition.EnergyPurchase
   wattadvisor.optimization_model.model_composition.WeatherDataLib


Functions
---------

.. autoapisummary::

   wattadvisor.optimization_model.model_composition.get_weather_data_from_file
   wattadvisor.optimization_model.model_composition.compose


Module Contents
---------------

.. py:class:: ConfigModel

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: solver
      :type:  wattadvisor.data_models.enums.SupportedSolver


   .. py:attribute:: solver_timeout
      :type:  int


   .. py:attribute:: default_interest_rate
      :type:  float


   .. py:attribute:: data_dependencies
      :type:  ConfigModelDataDependencies


   .. py:attribute:: logging
      :type:  ConfigModelLogging | None


.. py:class:: InputModel

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: location
      :type:  wattadvisor.data_models.input_model_location.InputModelLocation


   .. py:attribute:: interest_rate
      :type:  Optional[float]


   .. py:attribute:: energy_demands
      :type:  list[wattadvisor.data_models.input_model_demand_object.InputModelDemandObject]


   .. py:attribute:: energy_components
      :type:  Optional[list[Union[wattadvisor.data_models.input_model_component_object.InputModelComponentPower, wattadvisor.data_models.input_model_component_object.InputModelComponentArea, wattadvisor.data_models.input_model_component_object.InputModelComponentStorage]]]


   .. py:attribute:: energy_tariffs
      :type:  Optional[wattadvisor.data_models.input_model_energy_tariffs.InputModelEnergyTariffs]


.. py:class:: InputModelSingleTariffObject

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: energy
      :type:  wattadvisor.data_models.input_model_single_tariff_energy_object.InputModelSingleTariffEnergyObject


   .. py:attribute:: power
      :type:  Optional[float]


.. py:class:: Component(name: str, interest_rate: None | float = None, parameters: None | dict = None)

   
   Parent base class for all optimization energy components.
   Contains empty methods which are overidden by child classes.

   :param name: Name of the component
   :type name: str
   :param interest_rate: Interest rate to determine annuity factor for investment calculation of the component, by default None
   :type interest_rate: None | float, optional
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: None | dict, optional

   :raises ValueError: If values of ``interest_rate`` and ``lifespan`` (from ``parameters``) are ``None``.


   .. py:method:: add_to_model(model: pyomo.core.Model, t: pyomo.core.RangeSet) -> pyomo.core.Model

      Calls the appropriate functions to add parameters, variables and constraints to the pyomo model given by `model`.

      :param model: Pyomo model to which the parameters, variables and constraints will be added.
      :type model: Model
      :param t: Time set over which time-variant parameters, variables and constraints will be added.
      :type t: RangeSet

      :returns: Pyomo model with the added parameters, variables and constraints
      :rtype: Model



.. py:class:: EnergyDemand(name: str, energy_type: wattadvisor.data_models.enums.EnergyType, demand_profile: pandas.Series | None = None, demand_sum: float | None = None, profile_type: str | None = None, weather_temp_air_data: pandas.Series | None = None)

   Bases: :py:obj:`wattadvisor.optimization_model.components.base.Component`


   
   Component which consumes energy of a certain ``EnergyType`` to fulfill an energy demand.

   :param name: Name of the component
   :type name: str
   :param energy_type: Energy type which is consumed
   :type energy_type: enums.EnergyType
   :param demand_profile: Time series representing an hourly demand profile for one year, by default None
   :type demand_profile: pd.Series | None, optional
   :param demand_sum: Sum of energy demanded per year, by default None
   :type demand_sum: float | None, optional
   :param profile_type: Type of energy demand profile to generate a profile for if ``demand_profile`` not provided, by default None.
                        See parameter ``demand_group`` of functions ``..utils.demand_tools.generate_electrical_demand_profile()``
                        and ``..utils.demand_tools.generate_heat_demand_profile()`` for more information.
   :type profile_type: str | None, optional
   :param weather_temp_air_data: Time series of hourly air temperature values, by default None.
                                 Only required if ``energy_type`` is ``THERMAL`` or ``NATURAL_GAS`` and ``demand_profile`` is ``None``
   :type weather_temp_air_data: pd.Series | None, optional

   :raises ValueError: If no ``demand_profile`` and no `demand_sum` or no `profile_type` given
   :raises ValueError: If no ``demand_profile`` and no `weather_temp_air_data` given and `energy_type` is `THERMAL` or `NATURAL_GAS`


.. py:class:: EnergyFeedin(name: str, parameters: dict, energy_type: wattadvisor.data_models.enums.EnergyType, energy_price_scalar: float | None = None, energy_price_profile: pandas.Series | None = None, power_price: float | None = None)

   Bases: :py:obj:`wattadvisor.optimization_model.components.base.Component`


   
   Component that feeds surplus energy into grid .

   :param name: Name of the component
   :type name: str
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict
   :param energy_type: Energy type which is fed in
   :type energy_type: enums.EnergyType
   :param energy_price_scalar: Scalar price for feeding in per energy unit [€/kWh], by default None
   :type energy_price_scalar: float | None, optional
   :param energy_price_profile: Time series containing hourly variant energy prices for one year, by default None
   :type energy_price_profile: pd.Series | None, optional
   :param power_price: Price to pay for maximum grid load per year [€/(kW * a)], by default None
   :type power_price: float | None, optional


.. py:class:: EnergyPurchase(name: str, parameters: dict, energy_type: wattadvisor.data_models.enums.EnergyType, energy_price_scalar: float | None = None, energy_price_profile: pandas.Series | None = None, power_price: float | None = None)

   Bases: :py:obj:`wattadvisor.optimization_model.components.base.Component`


   
   Component that simulates the import and obtaining of energy from external sources
   in different forms like gas, oil, electricity or heat.
   This component imports electric power and applies a cost for the amount imported as
   well as a monthly base rate depending on the consumption.

   :param name: Name of the component
   :type name: str
   :param parameters: Dictionary of techno-economic parameters of the component, by default None.
                      A dict of the following structure is expeceted.
                      At least one key at first level ("scalars" or "tabs") is required:

                      .. code-block:: json

                          {
                              "scalars": {
                                  "parameter_title": 0
                              },
                              "tabs": {
                                  "tab_title": {
                                      "key_1": 1,
                                      "key_2": 2
                                  }
                              }
                          }
   :type parameters: dict
   :param energy_type: Energy type which is purchased
   :type energy_type: enums.EnergyType
   :param energy_price_scalar: Scalar price for purchasement per energy unit [€/kWh], by default None
   :type energy_price_scalar: float | None, optional
   :param energy_price_profile: Time series containing hourly variant energy prices for one year, by default None
   :type energy_price_profile: pd.Series | None, optional
   :param power_price: Price to pay for maximum grid load per year [€/(kW * a)], by default None
   :type power_price: float | None, optional


.. py:class:: WeatherDataLib(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Supported libraries for weather data acquiring




   .. py:attribute:: PVLIB
      :value: 'pvlib'



   .. py:attribute:: TEMPERATURE
      :value: 'temperature'



   .. py:attribute:: WINDPOWERLIB
      :value: 'windpowerlib'



.. py:function:: get_weather_data_from_file(file_path: pathlib.Path, longitude: float, latitude: float, lib: wattadvisor.data_models.enums.WeatherDataLib) -> pandas.DataFrame

   Reads weather data from a raw weather data NETCDF file obtained from ERA5 Climate Data Store.

   :param file_path: Path to the NETCDF file containing raw weather data from ERA5 Climate Data Store
   :type file_path: Path
   :param longitude: longitude of the location to obtain weather data for
   :type longitude: float
   :param latitude: latitude of the location to obtain weather data for
   :type latitude: float
   :param lib: Library to obtain weather data for
   :type lib: WeatherDataLib

   :returns: Weather data
   :rtype: pd.DataFrame


.. py:data:: logger

.. py:function:: compose(input: wattadvisor.data_models.input_model.InputModel, parameters: dict, config: wattadvisor.data_models.config_model.ConfigModel, pyomo_model: pyomo.core.base.PyomoModel.Model, t: pyomo.core.base.set.RangeSet, model_path: pathlib.Path) -> tuple[pyomo.core.base.PyomoModel.Model, list[wattadvisor.optimization_model.components.base.Component]]

   Adds all relevant components to the pyomo optimization model `pyomo_model` based on the parameterization in the input request `input` and creates the objective.

   :param input: Input request containing the parameterization of the optimization model components
   :type input: InputModel
   :param parameters: Techno-economic data for the energy components
   :type parameters: dict
   :param config: Configuration of the optimization model
   :type config: ConfigModel
   :param pyomo_model: Pyomo model to add the components and objective to
   :type pyomo_model: Model
   :param t: Time set to use for variable, parameter and constraint creation
   :type t: RangeSet
   :param model_path: Path of the model base directory
   :type model_path: Path

   :returns: The optimization model with all components added and a separate list of all component objects added to the model.
   :rtype: tuple[Model, list[Component]]

   :raises ValueError: If for one energy type a demand but no production component is parameterized, the bilance for this energy type cannot be built


