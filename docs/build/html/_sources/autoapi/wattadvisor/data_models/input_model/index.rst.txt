wattadvisor.data_models.input_model
===================================

.. py:module:: wattadvisor.data_models.input_model

.. autoapi-nested-parse::

   Definition of the accepted input request body

   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Classes
-------

.. autoapisummary::

   wattadvisor.data_models.input_model.InputModelComponentPower
   wattadvisor.data_models.input_model.InputModelComponentArea
   wattadvisor.data_models.input_model.InputModelComponentStorage
   wattadvisor.data_models.input_model.InputModelDemandObject
   wattadvisor.data_models.input_model.InputModelEnergyTariffs
   wattadvisor.data_models.input_model.InputModelLocation
   wattadvisor.data_models.input_model.InputModel


Module Contents
---------------

.. py:class:: InputModelComponentPower

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: component_type
      :type:  wattadvisor.data_models.enums.PowerUnitComponent


   .. py:attribute:: installed_power
      :type:  float


   .. py:attribute:: potential_power
      :type:  Optional[float]


   .. py:attribute:: capex
      :type:  Optional[float]


   .. py:attribute:: opex
      :type:  Optional[float]


   .. py:attribute:: lifespan
      :type:  Optional[float]


.. py:class:: InputModelComponentArea

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: component_type
      :type:  wattadvisor.data_models.enums.AreaUnitComponent


   .. py:attribute:: installed_area
      :type:  float


   .. py:attribute:: potential_area
      :type:  Optional[float]


   .. py:attribute:: capex
      :type:  Optional[float]


   .. py:attribute:: opex
      :type:  Optional[float]


   .. py:attribute:: lifespan
      :type:  Optional[float]


.. py:class:: InputModelComponentStorage

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: component_type
      :type:  wattadvisor.data_models.enums.StorageComponent


   .. py:attribute:: installed_power
      :type:  Optional[float]


   .. py:attribute:: potential_power
      :type:  Optional[float]


   .. py:attribute:: installed_capacity
      :type:  float


   .. py:attribute:: potential_capacity
      :type:  Optional[float]


   .. py:attribute:: capex_capacity
      :type:  Optional[float]


   .. py:attribute:: capex_power
      :type:  Optional[float]


   .. py:attribute:: opex
      :type:  Optional[float]


   .. py:attribute:: lifespan
      :type:  Optional[float]


.. py:class:: InputModelDemandObject

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: demand_values
      :type:  list[confloat(ge=0)]


   .. py:attribute:: resolution
      :type:  wattadvisor.data_models.enums.Resolution


   .. py:attribute:: unit
      :type:  wattadvisor.data_models.enums.EnergyUnit


   .. py:attribute:: energy_type
      :type:  wattadvisor.data_models.enums.EnergyType


.. py:class:: InputModelEnergyTariffs

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: electrical_energy_purchase
      :type:  Optional[wattadvisor.data_models.input_model_single_tariff_object.InputModelSingleTariffObject]


   .. py:attribute:: electrical_energy_feedin
      :type:  wattadvisor.data_models.input_model_single_tariff_object.InputModelSingleTariffObject


   .. py:attribute:: thermal_energy_purchase
      :type:  Optional[wattadvisor.data_models.input_model_single_tariff_object.InputModelSingleTariffObject]


   .. py:attribute:: natural_gas_purchase
      :type:  Optional[wattadvisor.data_models.input_model_single_tariff_object.InputModelSingleTariffObject]


.. py:class:: InputModelLocation

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: longitude
      :type:  float


   .. py:attribute:: latitude
      :type:  float


.. py:class:: InputModel

   Bases: :py:obj:`pydantic.BaseModel`


   .. py:attribute:: location
      :type:  wattadvisor.data_models.input_model_location.InputModelLocation


   .. py:attribute:: interest_rate
      :type:  Optional[float]


   .. py:attribute:: energy_demands
      :type:  list[wattadvisor.data_models.input_model_demand_object.InputModelDemandObject]


   .. py:attribute:: energy_components
      :type:  Optional[list[Union[wattadvisor.data_models.input_model_component_object.InputModelComponentPower, wattadvisor.data_models.input_model_component_object.InputModelComponentArea, wattadvisor.data_models.input_model_component_object.InputModelComponentStorage]]]


   .. py:attribute:: energy_tariffs
      :type:  Optional[wattadvisor.data_models.input_model_energy_tariffs.InputModelEnergyTariffs]


