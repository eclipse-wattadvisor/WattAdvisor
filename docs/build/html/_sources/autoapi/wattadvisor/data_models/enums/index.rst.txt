wattadvisor.data_models.enums
=============================

.. py:module:: wattadvisor.data_models.enums

.. autoapi-nested-parse::

   Contains several enum definitions to be used
   by the optimization model of WattAdvisor

   Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors. All rights reserved.
   Use of this source code is governed by a BSD-style license that can be found in the LICENSE file.



Classes
-------

.. autoapisummary::

   wattadvisor.data_models.enums.EnergyType
   wattadvisor.data_models.enums.Resolution
   wattadvisor.data_models.enums.EnergyUnit
   wattadvisor.data_models.enums.EnergyPriceUnit
   wattadvisor.data_models.enums.EnergyPurchaseTitle
   wattadvisor.data_models.enums.OptimizationStatus
   wattadvisor.data_models.enums.SupportedSolver
   wattadvisor.data_models.enums.WeatherDataType
   wattadvisor.data_models.enums.WeatherDataLib
   wattadvisor.data_models.enums.WeatherDataSource


Module Contents
---------------

.. py:class:: EnergyType(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Energy types usable by the optimization model




   .. py:attribute:: ELECTRICAL
      :value: 'ELECTRICAL'



   .. py:attribute:: THERMAL
      :value: 'THERMAL'



   .. py:attribute:: NATURAL_GAS
      :value: 'NATURAL_GAS'



   .. py:attribute:: COOLING
      :value: 'COOLING'



   .. py:attribute:: SOLID_FUEL
      :value: 'SOLID_FUEL'



.. py:class:: Resolution(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Time series resolution as defined by pandas




   .. py:attribute:: R1Y
      :value: '1Y'



   .. py:attribute:: R1M
      :value: '1M'



   .. py:attribute:: R1W
      :value: '1W'



   .. py:attribute:: R1D
      :value: '1D'



   .. py:attribute:: R1H
      :value: '1h'



   .. py:attribute:: R15T
      :value: '15min'



   .. py:attribute:: R1T
      :value: '1min'



.. py:class:: EnergyUnit(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Accepted energy units




   .. py:attribute:: MWH
      :value: 'MWH'



   .. py:attribute:: KWH
      :value: 'KWH'



   .. py:attribute:: WH
      :value: 'WH'



   .. py:method:: get_conversion_factor() -> float | int

      Returns the unit conversion factor to convert values into ``EnergyUnit.KWH``





.. py:class:: EnergyPriceUnit(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Accepted energy price units




   .. py:attribute:: EUR_PER_KWH
      :value: 'EUR_PER_KWH'



.. py:class:: EnergyPurchaseTitle(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Accepted energy purchase titles in the input request




   .. py:attribute:: ELECTRICAL
      :value: 'ELECTRICAL_ENERGY_PURCHASE'



   .. py:attribute:: THERMAL
      :value: 'THERMAL_ENERGY_PURCHASE'



   .. py:attribute:: NATURAL_GAS
      :value: 'NATURAL_GAS_PURCHASE'



.. py:class:: OptimizationStatus(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Optimization status titles used by the optimization result response




   .. py:attribute:: NEW
      :value: 'NEW'



   .. py:attribute:: PROCESSING
      :value: 'PROCESSING'



   .. py:attribute:: SUCCESS
      :value: 'SUCCESS'



   .. py:attribute:: UNBOUNDED
      :value: 'UNBOUNDED'



   .. py:attribute:: ERROR
      :value: 'ERROR'



.. py:class:: SupportedSolver(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Supported optimization solvers to be selected in the optimization model config




   .. py:attribute:: CBC
      :value: 'cbc'



   .. py:attribute:: HIGHS
      :value: 'highs'



   .. py:attribute:: GUROBI
      :value: 'gurobi'



.. py:class:: WeatherDataType(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Create a collection of name/value pairs.

   Example enumeration:

   >>> class Color(Enum):
   ...     RED = 1
   ...     BLUE = 2
   ...     GREEN = 3

   Access them by:

   - attribute access::

   >>> Color.RED
   <Color.RED: 1>

   - value lookup:

   >>> Color(1)
   <Color.RED: 1>

   - name lookup:

   >>> Color['RED']
   <Color.RED: 1>

   Enumerations can be iterated over, and know how many members they have:

   >>> len(Color)
   3

   >>> list(Color)
   [<Color.RED: 1>, <Color.BLUE: 2>, <Color.GREEN: 3>]

   Methods can be added to enumerations, and members can have their own
   attributes -- see the documentation for details.


   .. py:attribute:: air_temperature_2meters
      :value: 'AIR_TEMPERATURE_2METERS'



   .. py:attribute:: soil_temperature_level4
      :value: 'SOIL_TEMPERATURE_LEVEL4'



   .. py:attribute:: wind_speed_10meters
      :value: 'WIND_SPEED_10METERS'



   .. py:attribute:: wind_speed_100meters
      :value: 'WIND_SPEED_100METERS'



   .. py:attribute:: pressure_0meters
      :value: 'PRESSURE_0METERS'



   .. py:attribute:: roughness_length
      :value: 'ROUGHNESS_LENGTH'



   .. py:attribute:: global_horizontal_irradiance
      :value: 'GLOBAL_HORIZONTAL_IRRADIANCE'



   .. py:attribute:: diffuse_horizontal_irradiance
      :value: 'DIFFUSE_HORIZONTAL_IRRADIANCE'



.. py:class:: WeatherDataLib(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Supported libraries for weather data acquiring




   .. py:attribute:: PVLIB
      :value: 'pvlib'



   .. py:attribute:: TEMPERATURE
      :value: 'temperature'



   .. py:attribute:: WINDPOWERLIB
      :value: 'windpowerlib'



.. py:class:: WeatherDataSource(*args, **kwds)

   Bases: :py:obj:`enum.Enum`


   Supported sources for weather data




   .. py:attribute:: CUSTOM_CSV
      :value: 'custom_csv'



   .. py:attribute:: ERA5_NETCDF
      :value: 'era5_netcdf'



